"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VendBot
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä –∏ Telegram –±–æ—Ç–∞
"""
import logging
import asyncio
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from backend.core.config import get_settings
from backend.core.database import init_db, close_db
from backend.bot.setup import start_polling, start_webhook, get_bot, get_dispatcher
from backend.api.main import router as api_router
from backend.api.reports import router as reports_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = get_settings()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("Starting VendBot application...")
    
    # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    settings.print_config_summary()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        logger.info("‚úÖ Database initialized")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if settings.use_webhook:
            # Webhook —Ä–µ–∂–∏–º - –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ API endpoint
            logger.info("üåê Bot configured for webhook mode")
            bot = get_bot()
            dp = get_dispatcher()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            await bot.set_webhook(
                url=f"{settings.webhook_url}/webhook/{settings.bot_token}",
                drop_pending_updates=True
            )
        else:
            # Polling —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            logger.info("üîÑ Starting bot in polling mode...")
            asyncio.create_task(start_polling())
        
        logger.info("‚úÖ VendBot is ready!")
        
        yield
        
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        raise
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("Shutting down VendBot...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await close_db()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if not settings.use_webhook:
            bot = get_bot()
            await bot.session.close()
        
        logger.info("üëã VendBot stopped")


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="VendBot API",
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–π —Å–µ—Ç—å—é",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(api_router)
app.include_router(reports_router)

# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "name": "VendBot",
        "version": "1.0.0",
        "status": "operational",
        "environment": settings.actual_deployment_stage,
        "features": {
            "api": "/api/v1",
            "docs": "/docs",
            "reports": "/api/v1/reports",
            "bot": {
                "mode": "webhook" if settings.use_webhook else "polling",
                "active": True
            }
        }
    }

# Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {
        "status": "healthy",
        "timestamp": asyncio.get_event_loop().time()
    }


if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    import uvicorn
    
    uvicorn.run(
        "backend.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )