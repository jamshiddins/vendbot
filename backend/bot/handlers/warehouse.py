"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ –°–∫–ª–∞–¥
"""
import logging
from datetime import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from backend.models.user import User
from backend.models.warehouse import IngredientType, Inventory
from backend.models.hopper import Hopper, HopperStatus
from backend.bot.keyboards.menus import (
    get_warehouse_menu, get_back_button, get_cancel_button
)
from backend.bot.utils.decorators import role_required, with_error_handling
from backend.bot.utils.helpers import escape_html, format_number, get_progress_bar

logger = logging.getLogger(__name__)
router = Router(name="warehouse")


@router.callback_query(F.data == "warehouse:menu")
@with_error_handling
@role_required("warehouse", "admin")
async def warehouse_menu(callback: types.CallbackQuery, user: User, session: AsyncSession):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    total_types = await session.scalar(
        select(func.count(IngredientType.id))
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º
    low_stock = await session.scalar(
        select(func.count(Inventory.id))
        .join(IngredientType)
        .where(Inventory.quantity <= IngredientType.min_stock_level)
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤
    empty_hoppers = await session.scalar(
        select(func.count(Hopper.id))
        .where(Hopper.status == HopperStatus.EMPTY)
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤
    filled_hoppers = await session.scalar(
        select(func.count(Hopper.id))
        .where(Hopper.status == HopperStatus.FILLED)
    )
    
    text = f"""
üì¶ <b>–°–∫–ª–∞–¥</b>

–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {escape_html(user.full_name)}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –¢–∏–ø–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {total_types}
- –ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å: {low_stock} {'‚ö†Ô∏è' if low_stock > 0 else '‚úÖ'}
- –ü—É—Å—Ç—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤: {empty_hoppers}
- –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤: {filled_hoppers}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_warehouse_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:stock")
@with_error_handling
@role_required("warehouse", "admin")
async def view_stock(callback: types.CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    stmt = select(IngredientType, Inventory).join(
        Inventory, 
        IngredientType.id == Inventory.ingredient_type_id,
        isouter=True
    ).order_by(IngredientType.category, IngredientType.name)
    
    result = await session.execute(stmt)
    ingredients = result.all()
    
    if not ingredients:
        await callback.answer("–ù–∞ —Å–∫–ª–∞–¥–µ –ø—É—Å—Ç–æ", show_alert=True)
        return
    
    text = "üìä <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ</b>\n\n"
    
    current_category = None
    for ingredient_type, inventory in ingredients:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if ingredient_type.category != current_category:
            current_category = ingredient_type.category
            text += f"\n<b>{current_category.upper()}</b>\n"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
        quantity = inventory.quantity if inventory else 0
        reserved = inventory.reserved_quantity if inventory else 0
        available = quantity - reserved
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if inventory:
            emoji = inventory.stock_level_emoji
        else:
            emoji = "üî¥"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = get_progress_bar(
            quantity,
            ingredient_type.max_stock_level,
            length=8
        )
        
        text += (
            f"{emoji} <b>{ingredient_type.name}</b>\n"
            f"   {progress}\n"
            f"   –í—Å–µ–≥–æ: {format_number(quantity, 1)} {ingredient_type.unit} | "
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {format_number(available, 1)} {ingredient_type.unit}\n"
        )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if quantity <= ingredient_type.min_stock_level:
            text += f"   ‚ö†Ô∏è <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</i>\n"
        elif quantity <= ingredient_type.reorder_level:
            text += f"   üì¶ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫–∞–∑–∞—Ç—å</i>\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:receive")
@with_error_handling
@role_required("warehouse", "admin")
async def start_receive(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—ë–º–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    text = """
üì• <b>–ü—Ä–∏—ë–º–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>

–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—ë–º–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
- –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:issue")
@with_error_handling
@role_required("warehouse", "admin")
async def start_issue(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ –±—É–Ω–∫–µ—Ä–æ–≤"""
    text = """
üì§ <b>–í—ã–¥–∞—á–∞ –±—É–Ω–∫–µ—Ä–æ–≤</b>

–§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –í—ã–±—Ä–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±—É–Ω–∫–µ—Ä—ã
- –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
- –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:fill")
@with_error_handling
@role_required("warehouse", "admin")
async def start_fill(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞"""
    text = """
üîÑ <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤</b>

–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –í—ã–±—Ä–∞—Ç—å –ø—É—Å—Ç–æ–π –±—É–Ω–∫–µ—Ä
- –í—ã–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
- –í–∑–≤–µ—Å–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–∞

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:return")
@with_error_handling
@role_required("warehouse", "admin")
async def start_return(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±—É–Ω–∫–µ—Ä–∞"""
    text = """
‚Ü©Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç –±—É–Ω–∫–µ—Ä–æ–≤</b>

–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –ü—Ä–∏–Ω—è—Ç—å –±—É–Ω–∫–µ—Ä –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
- –í–∑–≤–µ—Å–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
- –í–µ—Ä–Ω—É—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–∞ —Å–∫–ª–∞–¥
- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–Ω–∫–µ—Ä –Ω–∞ —á–∏—Å—Ç–∫—É

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:history")
@with_error_handling
@role_required("warehouse", "admin")
async def view_history(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    text = """
üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫ —Ç–æ–≤–∞—Ä–∞
- –ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á –±—É–Ω–∫–µ—Ä–æ–≤
- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π
- –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "warehouse:inventory")
@with_error_handling
@role_required("warehouse", "admin")
async def start_inventory(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    text = """
üìã <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</b>

–§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
- –í—ã—è–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
- –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ
- –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ['router']