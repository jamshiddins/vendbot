"""
–û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
"""
import logging

from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from backend.models.user import User, UserRole
from backend.bot.keyboards.menus import (
    get_main_menu, get_phone_keyboard, remove_keyboard
)
from backend.bot.states.all_states import CommonStates
from backend.bot.utils.helpers import escape_html, format_phone
from backend.bot.utils.decorators import with_error_handling, log_action

logger = logging.getLogger(__name__)
router = Router(name="common")


@router.message(CommandStart())
@with_error_handling
async def cmd_start(
    message: types.Message,
    session: AsyncSession,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    telegram_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    stmt = select(User).where(User.telegram_id == telegram_id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not user.is_active:
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if message.from_user.username != user.username:
            user.username = message.from_user.username
            await session.commit()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {escape_html(user.full_name)}!

–í–∞—à–∏ —Ä–æ–ª–∏: {user.get_display_roles()}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:
"""
        await message.answer(
            text,
            reply_markup=get_main_menu(list(user.role_names))
        )
        
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VendBot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–π —Å–µ—Ç—å—é.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:
"""
        await message.answer(text, reply_markup=remove_keyboard())
        await state.set_state(CommonStates.registration_name)


@router.message(CommonStates.registration_name)
@with_error_handling
async def process_registration_name(
    message: types.Message,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    full_name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if len(full_name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    if len(full_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(full_name=full_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    text = f"""
‚úÖ –û—Ç–ª–∏—á–Ω–æ, {escape_html(full_name)}!

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:
"""
    await message.answer(text, reply_markup=get_phone_keyboard())
    await state.set_state(CommonStates.registration_phone)


@router.message(CommonStates.registration_phone)
@with_error_handling
async def process_registration_phone(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone = None
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact:
        phone = message.contact.phone_number
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é
    elif message.text:
        phone = message.text.strip()
    
    if not phone:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_phone_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    formatted_phone = format_phone(phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    full_name = data['full_name']
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=full_name,
        phone=formatted_phone,
        is_active=True
    )
    
    session.add(new_user)
    await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = f"""
‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {escape_html(full_name)}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–í–∞—à Telegram ID: `{message.from_user.id}`
(–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
"""
    
    await message.answer(
        text,
        reply_markup=get_main_menu([]),
        parse_mode="Markdown"
    )
    
    logger.info(f"New user registered: {new_user.telegram_id} - {new_user.full_name}")


@router.message(Command("menu"))
@with_error_handling
@log_action("open_menu")
async def cmd_menu(
    message: types.Message,
    user: User,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    text = f"""
üì± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {escape_html(user.full_name)}
–†–æ–ª–∏: {user.get_display_roles()}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(
        text,
        reply_markup=get_main_menu(list(user.role_names))
    )


@router.message(Command("help"))
@with_error_handling
async def cmd_help(message: types.Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
- –ö–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∞" –æ—Ç–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

<b>–ü–æ —Ä–æ–ª—è–º:</b>
"""
    
    if user.has_role(UserRole.ADMIN):
        text += """
üë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
"""
    
    if user.has_role(UserRole.WAREHOUSE):
        text += """
üì¶ <b>–°–∫–ª–∞–¥:</b>
- –ü—Ä–∏—ë–º–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
- –í—ã–¥–∞—á–∞ –±—É–Ω–∫–µ—Ä–æ–≤
- –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
"""
    
    if user.has_role(UserRole.OPERATOR):
        text += """
üîß <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b>
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤
- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
- –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""
    
    if user.has_role(UserRole.DRIVER):
        text += """
üöö <b>–í–æ–¥–∏—Ç–µ–ª—å:</b>
- –ù–∞—á–∞–ª–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫
- –û—Ç–º–µ—Ç–∫–∏ –æ –∑–∞–ø—Ä–∞–≤–∫–∞—Ö
- –ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã
"""
    
    text += """

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    await message.answer(text)


@router.message(Command("profile"))
@with_error_handling
@log_action("view_profile")
async def cmd_profile(message: types.Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    from backend.bot.utils.helpers import format_datetime
    
    text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user.telegram_id}</code>
üë§ –ò–º—è: {escape_html(user.full_name)}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìã –†–æ–ª–∏: {user.get_display_roles()}
üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_datetime(user.created_at)}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(user.updated_at)}
"""
    
    await message.answer(text)


@router.message(Command("cancel"))
@with_error_handling
async def cmd_cancel(
    message: types.Message,
    state: FSMContext,
    user: User
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=remove_keyboard()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cmd_menu(message, user, state)
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")


@router.callback_query(F.data == "back_to_menu")
@with_error_handling
async def callback_back_to_menu(
    callback: types.CallbackQuery,
    user: User,
    state: FSMContext
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    text = f"""
üì± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {escape_html(user.full_name)}
–†–æ–ª–∏: {user.get_display_roles()}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu(list(user.role_names))
    )
    await callback.answer()


@router.callback_query(F.data == "profile")
@with_error_handling
@log_action("view_profile_inline")
async def callback_profile(callback: types.CallbackQuery, user: User):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    from backend.bot.utils.helpers import format_datetime
    from backend.bot.keyboards.menus import get_back_button
    
    text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user.telegram_id}</code>
üë§ –ò–º—è: {escape_html(user.full_name)}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìã –†–æ–ª–∏: {user.get_display_roles()}
üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_datetime(user.created_at)}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(user.updated_at)}
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "help")
@with_error_handling
async def callback_help(callback: types.CallbackQuery, user: User):
    """–°–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    from backend.bot.keyboards.menus import get_back_button
    
    text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
- –ö–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∞" –æ—Ç–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "back")
@with_error_handling
async def callback_back(
    callback: types.CallbackQuery,
    user: User,
    state: FSMContext
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_back_to_menu(callback, user, state)


@router.callback_query(F.data == "cancel")
@with_error_handling
async def callback_cancel(
    callback: types.CallbackQuery,
    user: User,
    state: FSMContext
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_menu(list(user.role_names))
    )
    await callback.answer()


@router.callback_query(F.data == "noop")
async def callback_noop(callback: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
@with_error_handling
async def unknown_message(message: types.Message, user: User, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    if current_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–µ –º–µ—à–∞–µ–º
        return
    
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ['router']