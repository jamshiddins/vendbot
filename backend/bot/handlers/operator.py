"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–∏ –û–ø–µ—Ä–∞—Ç–æ—Ä
"""
import logging
from datetime import datetime, timedelta

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_

from backend.models.user import User
from backend.models.machine import Machine, MachineStatus
from backend.models.hopper import Hopper, HopperStatus
from backend.models.operations import Operation, OperationType
from backend.bot.keyboards.menus import get_operator_menu, get_back_button
from backend.bot.utils.decorators import role_required, with_error_handling
from backend.bot.utils.helpers import escape_html, format_datetime

logger = logging.getLogger(__name__)
router = Router(name="operator")


@router.callback_query(F.data == "operator:tasks")
@with_error_handling
@role_required("operator", "admin")
async def operator_tasks(callback: types.CallbackQuery, user: User, session: AsyncSession):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã
    assigned_machines = await session.scalar(
        select(func.count(Machine.id))
        .where(Machine.assigned_operator_id == user.id)
    )
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã
    active_machines = await session.scalar(
        select(func.count(Machine.id))
        .where(
            Machine.assigned_operator_id == user.id,
            Machine.status == MachineStatus.ACTIVE
        )
    )
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –±—É–Ω–∫–µ—Ä—ã
    assigned_hoppers = await session.scalar(
        select(func.count(Hopper.id))
        .where(
            Hopper.assigned_operator_id == user.id,
            Hopper.status == HopperStatus.FILLED
        )
    )
    
    # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—É–Ω–∫–µ—Ä—ã
    installed_hoppers = await session.scalar(
        select(func.count(Hopper.id))
        .where(
            Hopper.assigned_operator_id == user.id,
            Hopper.status == HopperStatus.INSTALLED
        )
    )
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_start = datetime.now().replace(hour=0, minute=0, second=0)
    today_operations = await session.scalar(
        select(func.count(Operation.id))
        .where(
            Operation.user_id == user.id,
            Operation.created_at >= today_start
        )
    )
    
    text = f"""
üîß <b>–ó–∞–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>

–û–ø–µ—Ä–∞—Ç–æ—Ä: {escape_html(user.full_name)}

<b>üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –ê–≤—Ç–æ–º–∞—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {assigned_machines} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_machines})
- –ë—É–Ω–∫–µ—Ä–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {assigned_hoppers}
- –ë—É–Ω–∫–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {installed_hoppers}
- –û–ø–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_operations}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_operator_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:machines")
@with_error_handling
@role_required("operator", "admin")
async def view_machines(callback: types.CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã
    stmt = select(Machine).where(
        Machine.assigned_operator_id == user.id
    ).order_by(Machine.code)
    
    result = await session.execute(stmt)
    machines = result.scalars().all()
    
    if not machines:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤", show_alert=True)
        return
    
    text = "üè≠ <b>–í–∞—à–∏ –∞–≤—Ç–æ–º–∞—Ç—ã</b>\n\n"
    
    for machine in machines:
        # –°—Ç–∞—Ç—É—Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            MachineStatus.ACTIVE: "üü¢",
            MachineStatus.MAINTENANCE: "üü°",
            MachineStatus.BROKEN: "üî¥",
            MachineStatus.INACTIVE: "‚ö´"
        }.get(machine.status, "‚ö™")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤
        hopper_count = await session.scalar(
            select(func.count(Hopper.id))
            .where(
                Hopper.machine_id == machine.id,
                Hopper.status == HopperStatus.INSTALLED
            )
        )
        
        text += (
            f"{status_emoji} <b>{machine.code}</b> - {escape_html(machine.name)}\n"
            f"üìç {escape_html(machine.display_location)}\n"
            f"üì¶ –ë—É–Ω–∫–µ—Ä–æ–≤: {hopper_count}/4\n"
        )
        
        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        if machine.last_service_date:
            days_ago = (datetime.now() - machine.last_service_date).days
            text += f"üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {days_ago} –¥–Ω. –Ω–∞–∑–∞–¥\n"
            
            if days_ago > 30:
                text += "‚ö†Ô∏è <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ!</i>\n"
        
        text += "\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:stats")
@with_error_handling
@role_required("operator", "admin")
async def view_stats(callback: types.CallbackQuery, user: User, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.now()
    
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today_start = now.replace(hour=0, minute=0, second=0)
    today_ops = await session.scalar(
        select(func.count(Operation.id))
        .where(
            Operation.user_id == user.id,
            Operation.created_at >= today_start
        )
    )
    
    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week_start = now - timedelta(days=7)
    week_ops = await session.scalar(
        select(func.count(Operation.id))
        .where(
            Operation.user_id == user.id,
            Operation.created_at >= week_start
        )
    )
    
    # –ó–∞ –º–µ—Å—è—Ü
    month_start = now.replace(day=1, hour=0, minute=0, second=0)
    month_ops = await session.scalar(
        select(func.count(Operation.id))
        .where(
            Operation.user_id == user.id,
            Operation.created_at >= month_start
        )
    )
    
    # –ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü
    stmt = select(
        Operation.operation_type,
        func.count(Operation.id)
    ).where(
        Operation.user_id == user.id,
        Operation.created_at >= month_start
    ).group_by(Operation.operation_type)
    
    result = await session.execute(stmt)
    operations_by_type = result.all()
    
    text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b>
- –°–µ–≥–æ–¥–Ω—è: {today_ops}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {week_ops}
- –ó–∞ –º–µ—Å—è—Ü: {month_ops}

<b>–ü–æ —Ç–∏–ø–∞–º –∑–∞ –º–µ—Å—è—Ü:</b>
"""
    
    type_names = {
        OperationType.HOPPER_INSTALL: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–Ω–∫–µ—Ä–æ–≤",
        OperationType.HOPPER_REMOVE: "–°–Ω—è—Ç–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤",
        OperationType.MACHINE_SERVICE: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        OperationType.PROBLEM_REPORT: "–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö"
    }
    
    for op_type, count in operations_by_type:
        name = type_names.get(op_type, op_type)
        text += f"‚Ä¢ {name}: {count}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:install")
@with_error_handling
@role_required("operator", "admin")
async def start_install(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–∞"""
    text = """
üì¶ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–Ω–∫–µ—Ä–∞</b>

–ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
1. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º
2. –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—É–Ω–∫–µ—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–∏
4. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:remove")
@with_error_handling
@role_required("operator", "admin")
async def start_remove(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–Ω—è—Ç–∏—è –±—É–Ω–∫–µ—Ä–∞"""
    text = """
üì§ <b>–°–Ω—è—Ç–∏–µ –±—É–Ω–∫–µ—Ä–∞</b>

–ü—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç
2. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è —Å–Ω—è—Ç–∏—è
3. –í–∑–≤–µ—Å—å—Ç–µ –±—É–Ω–∫–µ—Ä —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
4. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ
5. –í–µ—Ä–Ω–∏—Ç–µ –±—É–Ω–∫–µ—Ä –Ω–∞ —Å–∫–ª–∞–¥

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:service")
@with_error_handling
@role_required("operator", "admin")
async def start_service(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    text = """
üîß <b>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞</b>

–í–∏–¥—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:
- –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û
- –ß–∏—Å—Ç–∫–∞
- –ú–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç
- –ó–∞–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤

–° —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "operator:report")
@with_error_handling
@role_required("operator", "admin")
async def start_report(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    text = """
‚ö†Ô∏è <b>–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ</b>

–¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º:
- –ü–æ–ª–æ–º–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
- –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—É–Ω–∫–µ—Ä–æ–º
- –ù–µ—Ö–≤–∞—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
- –î—Ä—É–≥–æ–µ

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã.

<i>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</i>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button()
    )
    await callback.answer()


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ['router']