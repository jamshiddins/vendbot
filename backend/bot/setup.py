"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
"""
import logging
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from backend.core.config import get_settings
from backend.core.database import get_async_session

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None


def create_bot() -> Bot:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    settings = get_settings()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot_properties = DefaultBotProperties(
        parse_mode=ParseMode.HTML,
        link_preview_is_disabled=True,
        protect_content=False
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot_instance = Bot(
        token=settings.bot_token,
        default=bot_properties
    )
    
    logger.info("‚úÖ Telegram Bot —Å–æ–∑–¥–∞–Ω")
    return bot_instance


def create_dispatcher() -> Dispatcher:
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    settings = get_settings()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if settings.use_redis and settings.redis_url:
        storage = RedisStorage.from_url(settings.redis_url)
        logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    else:
        storage = MemoryStorage()
        logger.info("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Memory Storage –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dispatcher = Dispatcher(storage=storage)
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    setup_middlewares(dispatcher)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(dispatcher)
    
    logger.info("‚úÖ Dispatcher –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return dispatcher


def setup_middlewares(dispatcher: Dispatcher):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –±–æ—Ç–∞
    """
    from backend.bot.middleware.database import DatabaseMiddleware
    from backend.bot.middleware.auth import AuthMiddleware
    from backend.bot.middleware.logging import LoggingMiddleware
    
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ—Ç–æ–º –ë–î, –ø–æ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    dispatcher.message.middleware(LoggingMiddleware())
    dispatcher.callback_query.middleware(LoggingMiddleware())
    
    dispatcher.message.middleware(DatabaseMiddleware())
    dispatcher.callback_query.middleware(DatabaseMiddleware())
    
    dispatcher.message.middleware(AuthMiddleware())
    dispatcher.callback_query.middleware(AuthMiddleware())
    
    logger.info("‚úÖ Middleware –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")


def setup_handlers(dispatcher: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    from backend.bot.handlers import setup_all_handlers
    
    setup_all_handlers(dispatcher)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


async def on_startup(bot: Bot):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    settings = get_settings()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await setup_bot_commands(bot)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if settings.use_webhook:
        await bot.set_webhook(
            url=settings.webhook_url,
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {settings.webhook_url}")
    else:
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")


async def on_shutdown(bot: Bot):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    """
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def setup_bot_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é
    """
    from aiogram.types import BotCommand
    
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="menu", description="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def get_bot() -> Bot:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    global bot
    if not bot:
        bot = create_bot()
    return bot


def get_dispatcher() -> Dispatcher:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    """
    global dp
    if not dp:
        dp = create_dispatcher()
    return dp


async def start_polling():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    """
    bot = get_bot()
    dp = get_dispatcher()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


async def start_webhook(app: web.Application):
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
    """
    bot = get_bot()
    dp = get_dispatcher()
    settings = get_settings()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    webhook_path = f"/webhook/{settings.bot_token}"
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=webhook_path)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    logger.info(f"üöÄ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—É—Ç–∏: {webhook_path}")