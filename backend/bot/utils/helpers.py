"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
"""
import re
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta

from aiogram import types
from aiogram.utils.markdown import hcode, hbold, hitalic, hlink


def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
    """
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace('"', "&quot;")
        .replace("'", "&#39;")
    )


def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    if len(digits) == 11 and digits.startswith('7'):
        # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    elif len(digits) == 10:
        # –ë–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
        return f"({digits[0:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:10]}"
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return phone


def format_datetime(dt: datetime, format: str = "full") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    
    Args:
        dt: –û–±—ä–µ–∫—Ç datetime
        format: –§–æ—Ä–º–∞—Ç (full, date, time, short)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not dt:
        return "‚Äî"
    
    formats = {
        "full": "%d.%m.%Y %H:%M",
        "date": "%d.%m.%Y",
        "time": "%H:%M",
        "short": "%d.%m %H:%M"
    }
    
    return dt.strftime(formats.get(format, formats["full"]))


def format_timedelta(td: timedelta) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    
    Args:
        td: –û–±—ä–µ–∫—Ç timedelta
        
    Returns:
        –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    total_seconds = int(td.total_seconds())
    
    days = total_seconds // 86400
    hours = (total_seconds % 86400) // 3600
    minutes = (total_seconds % 3600) // 60
    
    parts = []
    
    if days > 0:
        parts.append(f"{days} –¥–Ω.")
    if hours > 0:
        parts.append(f"{hours} —á.")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω.")
    
    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"


def format_number(number: float, decimals: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ä–∞–∑—Ä—è–¥–æ–≤
    
    Args:
        number: –ß–∏—Å–ª–æ
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if decimals > 0:
        formatted = f"{number:,.{decimals}f}"
    else:
        formatted = f"{int(number):,}"
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
    return formatted.replace(",", " ").replace(".", ",")


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def validate_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    return len(digits) in [10, 11]


def parse_callback_data(callback_data: str) -> Dict[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç callback_data –≤ —Å–ª–æ–≤–∞—Ä—å
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback_data
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    
    Example:
        "admin:user:view:123" -> {
            "module": "admin",
            "entity": "user",
            "action": "view",
            "id": "123"
        }
    """
    parts = callback_data.split(":")
    
    result = {}
    
    if len(parts) >= 1:
        result["module"] = parts[0]
    if len(parts) >= 2:
        result["entity"] = parts[1]
    if len(parts) >= 3:
        result["action"] = parts[2]
    if len(parts) >= 4:
        result["id"] = parts[3]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for i, part in enumerate(parts[4:], 4):
        result[f"param{i-3}"] = part
    
    return result


def get_user_mention(user: types.User) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        HTML —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    name = escape_html(user.full_name)
    return hlink(name, f"tg://user?id={user.id}")


def split_list(lst: List[Any], chunk_size: int) -> List[List[Any]]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        lst: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
        chunk_size: –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    """
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]


def calculate_percentage(current: float, total: float) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        –ü—Ä–æ—Ü–µ–Ω—Ç (0-100)
    """
    if total == 0:
        return 0
    
    return min(100, max(0, (current / total) * 100))


def get_progress_bar(
    current: float,
    total: float,
    length: int = 10,
    filled: str = "‚ñì",
    empty: str = "‚ñë"
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        length: –î–ª–∏–Ω–∞ –±–∞—Ä–∞
        filled: –°–∏–º–≤–æ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        empty: –°–∏–º–≤–æ–ª –ø—É—Å—Ç–æ—Ç—ã
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    """
    percentage = calculate_percentage(current, total)
    filled_length = int(length * percentage / 100)
    
    bar = filled * filled_length + empty * (length - filled_length)
    
    return f"{bar} {percentage:.0f}%"


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
    """
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    
    return f"{size_bytes:.1f} –¢–ë"


def is_valid_telegram_id(telegram_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram ID
    
    Args:
        telegram_id: ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π
    """
    try:
        tid = int(telegram_id)
        return tid > 0
    except (ValueError, TypeError):
        return False


def create_mention_list(users: List[Any], separator: str = ", ") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å telegram_id –∏ full_name)
        separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    """
    mentions = []
    
    for user in users:
        name = escape_html(user.full_name)
        mention = hlink(name, f"tg://user?id={user.telegram_id}")
        mentions.append(mention)
    
    return separator.join(mentions)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
MAX_MESSAGE_LENGTH = 4096
MAX_CAPTION_LENGTH = 1024
MAX_CALLBACK_DATA_LENGTH = 64

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJIS = {
    "success": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è",
    "loading": "‚è≥",
    "done": "‚ú®",
    "new": "üÜï",
    "hot": "üî•",
    "locked": "üîí",
    "unlocked": "üîì",
}


# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    'escape_html',
    'format_phone',
    'format_datetime',
    'format_timedelta',
    'format_number',
    'truncate_text',
    'format_file_size',
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    'validate_phone',
    'is_valid_telegram_id',
    
    # –£—Ç–∏–ª–∏—Ç—ã
    'parse_callback_data',
    'get_user_mention',
    'split_list',
    'calculate_percentage',
    'get_progress_bar',
    'create_mention_list',
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    'MAX_MESSAGE_LENGTH',
    'MAX_CAPTION_LENGTH',
    'MAX_CALLBACK_DATA_LENGTH',
    'STATUS_EMOJIS',
]