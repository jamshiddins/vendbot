"""
–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
"""
from enum import Enum
from typing import Optional, List, Set
from datetime import datetime

from sqlalchemy import (
    Column, String, BigInteger, Boolean, 
    Table, ForeignKey, DateTime, Integer
)
from sqlalchemy.orm import relationship, Mapped, mapped_column
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from backend.models.base import BaseModel, Base


class UserRole(str, Enum):
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    ADMIN = "admin"
    WAREHOUSE = "warehouse"
    OPERATOR = "operator"
    DRIVER = "driver"
    
    @classmethod
    def get_display_name(cls, role: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
        names = {
            cls.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            cls.WAREHOUSE: "–ö–ª–∞–¥–æ–≤—â–∏–∫",
            cls.OPERATOR: "–û–ø–µ—Ä–∞—Ç–æ—Ä",
            cls.DRIVER: "–í–æ–¥–∏—Ç–µ–ª—å"
        }
        return names.get(role, role)


# –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π (many-to-many)
user_roles_table = Table(
    'user_roles',
    Base.metadata,
    Column('user_id', BigInteger, ForeignKey('users.id', ondelete='CASCADE'), primary_key=True),
    Column('role', String(50), primary_key=True),
    Column('assigned_at', DateTime(timezone=True), server_default=func.now()),
    Column('assigned_by', BigInteger, ForeignKey('users.id'), nullable=True)
)


class User(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∏—Å—Ç–µ–º—ã,
    –∏—Ö —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.
    """
    __tablename__ = "users"
    
    # Telegram –¥–∞–Ω–Ω—ã–µ
    telegram_id: Mapped[int] = mapped_column(
        BigInteger, 
        unique=True, 
        nullable=False,
        index=True,
        comment="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    username: Mapped[Optional[str]] = mapped_column(
        String(255), 
        nullable=True,
        index=True,
        comment="Username –≤ Telegram"
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    full_name: Mapped[str] = mapped_column(
        String(255), 
        nullable=False,
        comment="–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    phone: Mapped[Optional[str]] = mapped_column(
        String(20), 
        nullable=True,
        comment="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    is_active: Mapped[bool] = mapped_column(
        Boolean, 
        default=True,
        comment="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    is_owner: Mapped[bool] = mapped_column(
        Boolean, 
        default=False,
        comment="–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)"
    )
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    roles: Mapped[List["UserRoleAssignment"]] = relationship(
        "UserRoleAssignment",
        back_populates="user",
        cascade="all, delete-orphan",
        foreign_keys="UserRoleAssignment.user_id"
    )
    
    # –û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
    operations = relationship("Operation", back_populates="user")
    photos = relationship("Photo", back_populates="user")
    trips = relationship("Trip", back_populates="driver", foreign_keys="Trip.driver_id")
    
    def __repr__(self) -> str:
        return f"<User(id={self.id}, telegram_id={self.telegram_id}, name={self.full_name})>"
    
    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏ ===
    
    @property
    def role_names(self) -> Set[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {assignment.role for assignment in self.roles if assignment.is_active}
    
    def has_role(self, role: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏"""
        if self.is_owner:  # –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
            return True
        return role in self.role_names
    
    def has_any_role(self, *roles: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        if self.is_owner:
            return True
        user_roles = self.role_names
        return any(role in user_roles for role in roles)
    
    def is_admin(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.is_owner or self.has_role(UserRole.ADMIN)
    
    async def add_role(
        self, 
        role: str, 
        assigned_by_id: Optional[int] = None,
        session: AsyncSession = None
    ) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
        for assignment in self.roles:
            if assignment.role == role:
                if not assignment.is_active:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
                    assignment.is_active = True
                    assignment.assigned_at = datetime.now()
                    assignment.assigned_by_id = assigned_by_id
                    return True
                return False  # –†–æ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        new_assignment = UserRoleAssignment(
            user_id=self.id,
            role=role,
            assigned_by_id=assigned_by_id
        )
        self.roles.append(new_assignment)
        
        if session:
            session.add(new_assignment)
        
        return True
    
    async def remove_role(self, role: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for assignment in self.roles:
            if assignment.role == role and assignment.is_active:
                assignment.is_active = False
                assignment.removed_at = datetime.now()
                return True
        return False
    
    def get_display_roles(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.is_owner:
            return "üëë –í–ª–∞–¥–µ–ª–µ—Ü"
        
        role_emojis = {
            UserRole.ADMIN: "üë®‚Äçüíº",
            UserRole.WAREHOUSE: "üì¶", 
            UserRole.OPERATOR: "üîß",
            UserRole.DRIVER: "üöö"
        }
        
        roles = []
        for role_name in sorted(self.role_names):
            emoji = role_emojis.get(role_name, "üë§")
            display_name = UserRole.get_display_name(role_name)
            roles.append(f"{emoji} {display_name}")
        
        return ", ".join(roles) if roles else "üë§ –ë–µ–∑ —Ä–æ–ª–∏"


class UserRoleAssignment(BaseModel):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    """
    __tablename__ = "user_role_assignments"
    
    user_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey('users.id', ondelete='CASCADE'),
        nullable=False
    )
    role: Mapped[str] = mapped_column(
        String(50),
        nullable=False
    )
    
    # –ö—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª
    assigned_by_id: Mapped[Optional[int]] = mapped_column(
        BigInteger,
        ForeignKey('users.id'),
        nullable=True
    )
    assigned_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now()
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    removed_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True
    )
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user = relationship("User", back_populates="roles", foreign_keys=[user_id])
    assigned_by = relationship("User", foreign_keys=[assigned_by_id])
    
    def __repr__(self) -> str:
        return f"<UserRoleAssignment(user_id={self.user_id}, role={self.role}, active={self.is_active})>"


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∏–º–ø–æ—Ä—Ç–∞
from sqlalchemy import func