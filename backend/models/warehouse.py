"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á–µ—Ç–∞
"""
from typing import Optional
from datetime import datetime

from sqlalchemy import (
    Column, String, Float, Integer,
    ForeignKey, UniqueConstraint, CheckConstraint
)
from sqlalchemy.orm import relationship, Mapped, mapped_column

from backend.models.base import BaseModel


class IngredientType(BaseModel):
    """
    –¢–∏–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    
    –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤,
    –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∞—Ö.
    """
    __tablename__ = "ingredient_types"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    name: Mapped[str] = mapped_column(
        String(255),
        unique=True,
        nullable=False,
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"
    )
    category: Mapped[str] = mapped_column(
        String(100),
        nullable=False,
        index=True,
        comment="–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ—Ñ–µ, –º–æ–ª–æ–∫–æ, —Å–∏—Ä–æ–ø—ã –∏ —Ç.–¥.)"
    )
    
    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    unit: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        default="–∫–≥",
        comment="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–≥, –ª, —à—Ç)"
    )
    
    # –£—Ä–æ–≤–Ω–∏ –∑–∞–ø–∞—Å–æ–≤
    min_stock_level: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        default=10.0,
        comment="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–∞"
    )
    reorder_level: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        default=20.0,
        comment="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞–∫–∞–∑–∞"
    )
    max_stock_level: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        default=100.0,
        comment="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–∞"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    description: Mapped[Optional[str]] = mapped_column(
        String(500),
        nullable=True,
        comment="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"
    )
    is_active: Mapped[bool] = mapped_column(
        Boolean,
        default=True,
        comment="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
    )
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    inventory = relationship("Inventory", back_populates="ingredient_type", uselist=False)
    hoppers = relationship("Hopper", back_populates="ingredient_type")
    
    def __repr__(self) -> str:
        return f"<IngredientType(name={self.name}, category={self.category})>"
    
    @property
    def display_name(self) -> str:
        """–ü–æ–ª–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"""
        return f"{self.category}: {self.name}"


class Inventory(BaseModel):
    """
    –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
    –Ω–∞ —Å–∫–ª–∞–¥–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    __tablename__ = "inventory"
    __table_args__ = (
        UniqueConstraint('ingredient_type_id', name='uq_inventory_ingredient'),
        CheckConstraint('quantity >= 0', name='ck_inventory_quantity_positive'),
        CheckConstraint('reserved_quantity >= 0', name='ck_inventory_reserved_positive'),
        CheckConstraint('reserved_quantity <= quantity', name='ck_inventory_reserved_not_exceed'),
    )
    
    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    ingredient_type_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey('ingredient_types.id'),
        nullable=False,
        unique=True,
        comment="ID —Ç–∏–ø–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞
    quantity: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        default=0.0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ"
    )
    reserved_quantity: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        default=0.0,
        comment="–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è
    last_restock_date: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True,
        comment="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    )
    last_restock_quantity: Mapped[Optional[float]] = mapped_column(
        Float,
        nullable=True,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    )
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    ingredient_type = relationship("IngredientType", back_populates="inventory")
    
    def __repr__(self) -> str:
        return f"<Inventory(ingredient_id={self.ingredient_type_id}, qty={self.quantity})>"
    
    @property
    def available_quantity(self) -> float:
        """–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)"""
        return max(0, self.quantity - self.reserved_quantity)
    
    @property
    def stock_level_status(self) -> str:
        """–°—Ç–∞—Ç—É—Å —É—Ä–æ–≤–Ω—è –∑–∞–ø–∞—Å–æ–≤"""
        if not self.ingredient_type:
            return "unknown"
        
        if self.quantity <= self.ingredient_type.min_stock_level:
            return "critical"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
        elif self.quantity <= self.ingredient_type.reorder_level:
            return "low"       # –ù–∏–∑–∫–∏–π
        elif self.quantity >= self.ingredient_type.max_stock_level:
            return "excess"    # –ò–∑–±—ã—Ç–æ–∫
        else:
            return "normal"    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
    
    @property
    def stock_level_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∑–∞–ø–∞—Å–æ–≤"""
        status_emojis = {
            "critical": "üî¥",
            "low": "üü°",
            "normal": "üü¢",
            "excess": "üîµ",
            "unknown": "‚ö™"
        }
        return status_emojis.get(self.stock_level_status, "‚ö™")
    
    def can_reserve(self, quantity: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.available_quantity >= quantity
    
    def reserve(self, quantity: float) -> bool:
        """–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        if self.can_reserve(quantity):
            self.reserved_quantity += quantity
            return True
        return False
    
    def release_reservation(self, quantity: float) -> bool:
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.reserved_quantity >= quantity:
            self.reserved_quantity -= quantity
            return True
        return False
    
    def consume(self, quantity: float) -> bool:
        """–°–ø–∏—Å–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–∞"""
        if self.quantity >= quantity:
            self.quantity -= quantity
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if self.reserved_quantity > 0:
                self.reserved_quantity = max(0, self.reserved_quantity - quantity)
            return True
        return False
    
    def restock(self, quantity: float) -> None:
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥"""
        self.quantity += quantity
        self.last_restock_date = datetime.now()
        self.last_restock_quantity = quantity


# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Boolean –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from sqlalchemy import Boolean