#!/usr/bin/env python3
"""
üöÄ VendBot - –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""
import sys
import subprocess
import os
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    if sys.version_info < (3, 9):
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ!")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Python —Å python.org")
        sys.exit(1)
    logger.info(f"‚úÖ Python {sys.version.split()[0]} –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        import fastapi
        import aiogram
        import sqlalchemy
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError:
        logger.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ])
            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π: pip install -r requirements.txt")
            sys.exit(1)

def create_project_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
    directories = [
        "backend",
        "backend/core",
        "backend/models", 
        "backend/bot",
        "backend/bot/handlers",
        "backend/bot/keyboards",
        "backend/bot/states",
        "backend/bot/utils",
        "backend/api",
        "backend/services",
        "uploads",
        "uploads/photos"
    ]
    
    for dir_path in directories:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
    for dir_path in directories:
        if dir_path.startswith("backend"):
            init_file = Path(dir_path) / "__init__.py"
            if not init_file.exists():
                init_file.touch()
    
    logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")

def create_env_if_missing():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists(".env"):
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞—é —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        with open(".env", "w", encoding="utf-8") as f:
            f.write("# Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n")
            f.write("BOT_TOKEN=your_bot_token_here\n\n")
            f.write("# –≠—Ç–∞–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (local/cloud/production)\n")
            f.write("DEPLOYMENT_STAGE=local\n\n")
            f.write("# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è SQLite)\n")
            f.write("DATABASE_URL=\n\n")
            f.write("# Redis (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è Memory Storage)\n")
            f.write("REDIS_URL=\n\n")
            f.write("# Webhook URL (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è polling)\n")
            f.write("WEBHOOK_URL=\n")
        
        logger.warning("‚ùó –í–ê–ñ–ù–û: –£–∫–∞–∂–∏ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        logger.info("üí° –ü–æ–ª—É—á–∏ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
        if "your_bot_token_here" in content:
            logger.warning("‚ùó –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
            return False
    
    logger.info("‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    return True

def run_migrations():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from backend.core.database import engine, Base
        # from backend.models import *  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π
        
        logger.info("üóÑÔ∏è –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        import asyncio
        
        async def create_tables():
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
        
        # asyncio.run(create_tables())  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë        ü§ñ VendBot Launcher ü§ñ         ‚ïë
    ‚ïë   –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–º v1.0   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    check_python_version()
    create_project_structure()
    install_requirements()
    
    if not create_env_if_missing():
        logger.info("\nüîß –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    run_migrations()
    
    logger.info("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é VendBot...")
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        os.environ["PYTHONPATH"] = os.getcwd()
        
        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º reload
        subprocess.run([
            sys.executable, "-m", "uvicorn",
            "backend.main:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--reload",
            "--log-level", "info"
        ])
        
    except KeyboardInterrupt:
        logger.info("\nüëã VendBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ModuleNotFoundError as e:
        logger.error(f"‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")